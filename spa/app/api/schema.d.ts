/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/reports/download": {
    post: operations["2b005afc5ea56154dcaee39c5aaf760c"];
  };
  "/translations/{filename}": {
    get: operations["8c26f9ccde28cd0eb6130fd2f44605a6"];
  };
  "/api/v1/asset/domain/{uuid}": {
    get: operations["asset/domain/get"];
  };
  "/api/v1/asset/{uuid}": {
    get: operations["asset/get"];
  };
  "/api/v1/asset/ip/{uuid}": {
    get: operations["asset/ip/get"];
  };
  "/api/v1/asset/os/{uuid}": {
    get: operations["asset/os/get"];
  };
  "/api/v1/asset/port/{uuid}": {
    get: operations["asset/port/get"];
  };
  "/api/v1/asset/{uuid}/vulnerability/{vulUuid}/details": {
    get: operations["asset/vulnerability/details"];
  };
  "/api/v1/asset/{uuid}/vulnerabilities": {
    get: operations["asset/vulnerability/list"];
  };
  "/api/v1/auth/change-password": {
    /** @description Change password */
    post: operations["changePassword"];
  };
  "/api/v1/auth/forgot-password": {
    /** @description Reset password */
    post: operations["forgotPassword"];
  };
  "/api/v1/auth/login": {
    /** @description Log in by credentials */
    post: operations["login"];
  };
  "/api/v1/auth/logout": {
    /** @description Logout a customer */
    post: operations["logout"];
  };
  "/api/v1/me": {
    get: operations["me"];
  };
  "/api/v1/auth/register": {
    /** @description Register a new customer */
    post: operations["register"];
  };
  "/api/v1/auth/sessions": {
    /** @description Retrieve a list of sessions */
    get: operations["sessions.list"];
  };
  "/api/v1/auth/sessions/{uuid}/revoke": {
    /** @description Revoke a session by UUID */
    post: operations["sessions.revoke"];
  };
  "/api/v1/auth/sessions/revoke": {
    /** @description Revoke all sessions for the current user */
    post: operations["sessions.revokeAll"];
  };
  "/api/v1/profile/change-password": {
    /** @description Change password */
    post: operations["changePasswordProfile"];
  };
  "/api/v1/profile/change-timezone": {
    /** @description Change timezone */
    post: operations["changeTimeZone"];
  };
  "/api/v1/dashboard": {
    get: operations["getDashboard"];
  };
  "/api/v1/dashboard/asset-changes": {
    get: operations["3b44fdc99fa98a60db9f7ff54f5fe7c8"];
  };
  "/api/v1/dashboard/asset-count": {
    get: operations["ecc48c49a2b657934d9ae02d44dad622"];
  };
  "/api/v1/dashboard/attack-vector-count": {
    get: operations["5f173cefa03130c82d7cb590454151d8"];
  };
  "/api/v1/dashboard/credentials": {
    get: operations["8fbabf2484f42b43812d52ca18a9a988"];
  };
  "/api/v1/dashboard/os": {
    get: operations["34847e5e0fb5d3b3cf990d3890ac6b06"];
  };
  "/api/v1/dashboard/open-ports": {
    get: operations["4b71b242c7e6f92273eb65e7b71bf8ca"];
  };
  "/api/v1/dashboard/overall-risk-score": {
    get: operations["a04f7b986fb9621a5b23776135540585"];
  };
  "/api/v1/dashboard/vulnerability-count": {
    get: operations["755168a919c3f29bf53ad0a6971d0f0d"];
  };
  "/api/v1/downloads": {
    /** @description Get downloads list */
    get: operations["downloads/list"];
  };
  "/api/v1/notifications/unread": {
    /** @description Unread notifications */
    get: operations["getUnreadNotifications"];
  };
  "/api/v1/notifications": {
    /** @description Mark notification as read */
    delete: operations["markNotificationsAsRead"];
  };
  "/api/v1/project/{uuid}/assets/change-affiliations": {
    post: operations["project/asset/change-affiliations"];
  };
  "/api/v1/project/{uuid}/assets/domains": {
    /** @description Get project domain list */
    get: operations["project/asset/domain/list"];
  };
  "/api/v1/project/{uuid}/assets/export": {
    /** @description Export project asset list */
    post: operations["project/asset/list/export"];
  };
  "/api/v1/project/{uuid}/asset-counters": {
    /** @description Get project asset counters */
    get: operations["project/asset/counters"];
  };
  "/api/v1/project/{uuid}/assets/ip": {
    /** @description Get project ip list */
    get: operations["project/asset/ip/list"];
  };
  "/api/v1/project/{uuid}/assets": {
    /** @description Get project asset list */
    get: operations["project/asset/list"];
  };
  "/api/v1/project/{uuid}/assets/os": {
    /** @description Get project operation system asset list */
    get: operations["project/asset/os/list"];
  };
  "/api/v1/project/{uuid}/assets/ports": {
    /** @description Get project port asset list */
    get: operations["project/asset/ports/list"];
  };
  "/api/v1/project": {
    /** @description Create a new project */
    post: operations["project/create"];
  };
  "/api/v1/project/{uuid}": {
    /** @description Get project by UUID */
    get: operations["project/get"];
  };
  "/api/v1/projects": {
    /** @description Get projects list */
    get: operations["project/list"];
  };
  "/api/v1/project/{uuid}/vulnerability/change-statuses": {
    post: operations["project/vulnerability/change-statuses"];
  };
  "/api/v1/project/{uuid}/vulnerabilities/export": {
    /** @description Export project vulnerability list */
    post: operations["asset/vulnerability/list/export"];
  };
  "/api/v1/project/{uuid}/vulnerability-counters": {
    get: operations["getProjectVulnerabilityCounters"];
  };
  "/api/v1/project/{uuid}/vulnerabilities": {
    get: operations["listProjectVulnerabilities"];
  };
  "/api/v1/reports": {
    get: operations["listReports"];
  };
  "/api/v1/two-step-auth/connect": {
    post: operations["twoStepConnect"];
  };
  "/api/v1/two-step-auth/disconnect": {
    post: operations["twoStepDisconnect"];
  };
  "/api/v1/two-step-auth/show-qr-code": {
    get: operations["twoStepShowQrCode"];
  };
  "/api/v1/two-step-auth/verify-code": {
    post: operations["twoStepShowVerifyCode"];
  };
  "/api/v1/vulnerability/{uuid}": {
    get: operations["getVulnerabilityByUuid"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @example 018944be-ffa3-728b-9439-cc2f9922a65b */
    Uuid: string;
    /**
     * @description ICANN domain name without any protocols
     * @example intruforce.com
     */
    DomainName: string;
    /**
     * @description IP address name
     * @example 185.215.4.51
     */
    IpName: string;
    /**
     * @description Operation system name
     * @example Linux v1.0 - v99.0
     */
    OsName: string;
    /**
     * @description Network port number
     * @example 443
     */
    PortNumber: Record<string, never>;
    AssetCounters: {
      total?: number;
      domains?: number;
      ips?: number;
    };
    VulnerabilityCounters: {
      total?: number;
      vulnerabilities?: number;
    };
    Status: {
      status?: boolean;
    };
    PaginationMeta: {
      pagination?: {
        /**
         * @description Current page number
         * @example 1
         */
        current_page?: Record<string, never>;
        /**
         * @description Last page number
         * @example 20
         */
        last_page?: Record<string, never>;
        /**
         * @description Items per page
         * @example 10
         */
        per_page?: Record<string, never>;
        /**
         * @description Total count of items
         * @example 200
         */
        total?: Record<string, never>;
      };
    };
    Project: {
      /**
       * @description Project UUID
       * @example 018944be-ffa3-728b-9439-cc2f9922a65b
       */
      uuid?: string;
      /**
       * @description Project name
       * @example intruforce
       */
      name?: string;
      /**
       * @description Project description
       * @example Dolor sit amet
       */
      description?: string;
    };
    Asset: {
      /** @example 018944be-ffa3-728b-9439-cc2f9922a65b */
      uuid?: string;
      project?: {
        /** @example 018944be-ffa3-728b-9439-cc2f9922a654 */
        uuid?: string;
        /** @example Project name */
        name?: string;
      };
      /** @example intruforce.com */
      static_value?: string;
      /** @example 0 */
      affiliation?: number;
      /** @example 0 */
      type?: number;
      /** @example 2023-07-06T01:01:01+00:00 */
      last_discovery_time?: string;
      /** @example 2023-07-06T01:01:01+00:00 */
      discovery_time?: string;
      /** @example 2023-07-06T01:01:01+00:00 */
      last_scan_time?: string;
      /** @example {"foo": "bar"} */
      data?: string;
    };
    Vulnerability: {
      /** @example 018944be-ffa3-728b-9439-cc2f9922a65b */
      uuid?: string;
      /** @example intruforce.com */
      code?: string;
      /** @example Dolor sit amet */
      description?: string;
      /** @example https://intruforce.com */
      url?: string;
      /**
       * @description timestamp
       * @example 1234567890
       */
      discovered_at?: string;
      /**
       * @description timestamp
       * @example 1234567890
       */
      last_discovered_at?: string;
    };
    Report: {
      /** @example 018944be-ffa3-728b-9439-cc2f9922a65b */
      uuid?: string;
      /** @example Report #11 */
      name?: string;
      /** @example Dolor sit amet */
      description?: string;
      /** @example reports/report_3832752.pdf */
      path?: string;
      /** @example pdf */
      file_type?: string;
      /** @example 10000 */
      file_size?: number;
      /** @example 2023-07-06T01:01:01+00:00 */
      uploaded_at?: string;
    };
    QRCode: {
      url?: string;
      secret?: string;
    };
    Token: {
      token?: string;
      type?: string;
      /** Format: date-time */
      expires_at?: string;
    };
    BackupCodes: string[];
    Notifications: {
        uuid?: string;
        type?: string;
        data?: string;
      }[];
    Auth: {
      token?: {
        /** @example test */
        token?: string;
        /** @example 2023-07-06T01:01:01+00:00 */
        expires_at?: string;
      };
    };
    Customer: {
      customer?: {
        /** @example 018944be-ffa3-728b-9439-cc2f9922a65b */
        uuid?: string;
        /** @example test@example.com */
        email?: string;
        profile?: {
          full_name?: {
            /** @example John */
            first_name?: string;
            /** @example Doe */
            last_name?: string;
          };
          /** @example intruforce */
          company_name?: string;
          /** @example Head of security */
          position_in_company?: string;
        };
      };
    };
    ThreatAssessment: {
      /** @example 8 */
      score?: number;
      /** @example 2023-07-06T01:01:01+00:00 */
      updated_at?: string;
    };
    AttackVector: {
      /** @example 4 */
      real?: number;
      /** @example 10 */
      potential?: number;
      /** @example 2023-07-06T01:01:01+00:00 */
      updated_at?: string;
    };
    PasswordLeak: {
      /** @example 15 */
      email_total?: number;
      /** @example 5 */
      email_compromised?: number;
      /** @example 30 */
      desktop_total?: number;
      /** @example 14 */
      desktop_compromised?: number;
      /** @example 2023-07-06T01:01:01+00:00 */
      updated_at?: string;
    };
    Credential: {
      /** @example 19 */
      total?: number;
      /** @example 6 */
      compromised?: number;
      service?: OneOf<[{
          /** @example TCP */
          name?: string;
          /** @example 100 */
          total?: number;
          /** @example 20 */
          compromised?: number;
        }, {
          /** @example UDP */
          name?: string;
          /** @example 120 */
          total?: number;
          /** @example 20 */
          compromised?: number;
        }]>[];
      /** @example 2023-07-06T01:01:01+00:00 */
      updated_at?: string;
    };
    TotalAsset: {
      /** @example 100 */
      total?: number;
      /** @example 5 */
      critical_vulnerabilities?: number;
      /** @example 30 */
      high_level_vulnerabilities?: number;
      /** @example 2023-07-06T01:01:01+00:00 */
      updated_at?: string;
    };
    OpenPort: {
      /** @example 79 */
      total?: number;
      /** @example 3 */
      high_risk?: number;
      /** @example 40 */
      medium_risk?: number;
      /** @example 2023-07-06T01:01:01+00:00 */
      updated_at?: string;
    };
    AssetChange: {
      /** @example 5 */
      new?: number;
      /** @example 0 */
      unavailable?: number;
      /** @example 2023-07-06T01:01:01+00:00 */
      updated_at?: string;
    };
    Download: {
      /**
       * @description Download UUID
       * @example 018944be-ffa3-728b-9439-cc2f9922a65b
       */
      uuid?: string;
      /**
       * @description Download name
       * @example Some download
       */
      name?: string;
      /**
       * @description Download description
       * @example Dolor sit amet
       */
      description?: string;
      /**
       * @description Download status
       * @example 0
       */
      status?: number;
      /**
       * @description Download progress
       * @example 0
       */
      progress?: number;
      files?: {
        /**
         * @description File UUID
         * @example 018944be-ffa3-728b-9439-cc2f9922a65b
         */
        uuid?: string;
        /**
         * @description File name
         * @example file.txt
         */
        name?: string;
        /**
         * @description File URL
         * @example https://example.com/file.txt
         */
        url?: string;
        /**
         * @description File type
         * @example txt
         */
        fileType?: string;
        /**
         * @description File size
         * @example 100
         */
        fileSize?: number;
      };
      /**
       * @description Download creation date
       * @example 2023-07-06T01:01:01+00:00
       */
      created_at?: string;
      /**
       * @description Download update date
       * @example 2023-07-06T01:01:01+00:00
       */
      updated_at?: string;
      /**
       * @description Download expiration date
       * @example 2023-07-06T01:01:01+00:00
       */
      expires_at?: string;
    };
    UnauthorizedError: {
      /** @example unauthorized */
      message?: string;
      /** @example 401 */
      code?: number;
    };
    ForbiddenError: {
      /** @example token_is_missing */
      message?: string;
      /** @example 403 */
      code?: number;
    };
    ValidationError: {
      /** @example validation_errors */
      message?: string;
      /** @example 422 */
      code?: number;
      errors?: {
          /** @example name */
          field?: string;
          errors?: {
              /** @example string_expected */
              message?: string;
              meta?: {
                  /** @example min */
                  key?: string;
                  /** @example 3 */
                  value?: string;
                }[];
            }[];
        }[];
    };
    /**
     * @description Risk types:
     *     * `0` - Total risk of asset or issue
     *     * `1` - Expert - risk by expert
     *     * `4` - CVSS v2
     *     * `5` - CVSS v3
     * @example 0
     * @enum {integer}
     */
    RiskType: None | Zero | Low | Medium | High | Critical;
    /**
     * @description Risk levels:
     *     * `0` - None (not set)
     *     * `1` - Zero
     *     * `2` - Low
     *     * `3` - Medium
     *     * `4` - High
     *     * `5` - Critical
     * @example 5
     * @enum {integer}
     */
    RiskLevel: None | Zero | Low | Medium | High | Critical;
    /**
     * @description Risk value object, can be convert to float by amount / denominator
     * @enum {object}
     */
    Risk: None | Zero | Low | Medium | High | Critical;
    DownloadReportFilter: {
      /** @description Reports to download */
      reports: components["schemas"]["ReportUuidFilter"][];
    };
    ReportUuidFilter: {
      /** @description Report UUID */
      uuid: string;
    };
    AssetCountersSchema: {
      filter?: components["schemas"]["AssetCountersSchemaFilter"];
    };
    AssetCountersSchemaFilter: {
      /**
       * @description Asset affiliation status
       * @default [
       *   0,
       *   1
       * ]
       */
      affiliation?: ((0 | 1 | 3 | 4 | null)[]) | null;
    };
    AssetListSchema: {
      sort?: components["schemas"]["AssetListSchemaSort"];
      filter?: components["schemas"]["AssetListSchemaFilter"];
      paginate?: components["schemas"]["AssetListSchemaSort"];
    };
    AssetListSchemaSort: {
      /**
       * @default desc
       * @enum {string|null}
       */
      by_risk?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      risk?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      risk_level?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      static_value?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      affiliation?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      by_affiliation?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      type?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      by_type?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      last_discovery_time?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      by_last_discovery_time?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      discovery_time?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      by_discovery_time?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      dns?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      by_dns?: "asc" | "desc" | null;
    };
    AssetListSchemaPaginate: {
      /** @default 1 */
      page?: Record<string, unknown> | null;
      /**
       * @default 25
       * @enum {intval|null}
       */
      limit?: 10 | 25 | 50 | null;
    };
    AssetListSchemaFilter: {
      /**
       * @default all
       * @enum {string}
       */
      type?: "all" | "domain" | "ip_address";
      /** @description Name of asset */
      static_value?: string | null;
      /**
       * @description Asset affiliation status
       * @default [
       *   0,
       *   1
       * ]
       */
      affiliation?: ((0 | 1 | 3 | 4 | null)[]) | null;
      /**
       * @description Risk levels
       * @default []
       */
      risk_level?: ((0 | 1 | 2 | 3 | 4 | 5 | null)[]) | null;
    };
    DomainListSchema: {
      sort?: components["schemas"]["DomainListSchemaSort"];
      filter?: components["schemas"]["DomainListSchemaFilter"];
      paginate?: components["schemas"]["DomainListSchemaSort"];
    };
    DomainListSchemaSort: {
      /**
       * @default desc
       * @enum {string|null}
       */
      by_risk?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      risk?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      risk_level?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      static_value?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      by_name?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      affiliation?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      by_affiliation?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      last_discovery_time?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      by_last_discovery_time?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      discovery_time?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      by_discovery_time?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      dns?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      by_dns?: "asc" | "desc" | null;
    };
    DomainListSchemaPaginate: {
      /** @default 1 */
      page?: Record<string, unknown> | null;
      /**
       * @default 25
       * @enum {intval|null}
       */
      limit?: 10 | 25 | 50 | null;
    };
    DomainListSchemaFilter: {
      /** @description Name of asset */
      static_value?: string | null;
      /**
       * @description Asset affiliation status
       * @default [
       *   0,
       *   1
       * ]
       */
      affiliation?: ((0 | 1 | 3 | 4 | null)[]) | null;
      /**
       * @description Risk levels
       * @default []
       */
      risk_level?: ((0 | 1 | 2 | 3 | 4 | 5 | null)[]) | null;
    };
    IpAddressListSchema: {
      sort?: components["schemas"]["IpAddressListSchemaSort"];
      filter?: components["schemas"]["IpAddressListSchemaFilter"];
      paginate?: components["schemas"]["IpAddressListSchemaSort"];
    };
    IpAddressListSchemaSort: {
      /**
       * @default desc
       * @enum {string|null}
       */
      by_risk?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      risk?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      risk_level?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      static_value?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      by_name?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      affiliation?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      by_affiliation?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      last_discovery_time?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      by_last_discovery_time?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      discovery_time?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      by_discovery_time?: "asc" | "desc" | null;
    };
    IpAddressListSchemaPaginate: {
      /** @default 1 */
      page?: Record<string, unknown> | null;
      /**
       * @default 25
       * @enum {intval|null}
       */
      limit?: 10 | 25 | 50 | null;
    };
    IpAddressListSchemaFilter: {
      /** @description Name of asset */
      static_value?: string | null;
      /**
       * @description Asset affiliation status
       * @default [
       *   0,
       *   1
       * ]
       */
      affiliation?: ((0 | 1 | 3 | 4 | null)[]) | null;
      /**
       * @description Risk levels
       * @default []
       */
      risk_level?: ((0 | 1 | 2 | 3 | 4 | 5 | null)[]) | null;
    };
    OperationSystemListSchema: {
      sort?: components["schemas"]["OperationSystemListSchemaSort"];
      filter?: components["schemas"]["OperationSystemListSchemaFilter"];
      paginate?: components["schemas"]["OperationSystemListSchemaSort"];
    };
    OperationSystemListSchemaSort: {
      /**
       * @default desc
       * @enum {string|null}
       */
      by_risk?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      risk?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      risk_level?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      static_value?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      by_name?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      affiliation?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      by_affiliation?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      last_discovery_time?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      by_last_discovery_time?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      discovery_time?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      by_discovery_time?: "asc" | "desc" | null;
    };
    OperationSystemListSchemaPaginate: {
      /** @default 1 */
      page?: Record<string, unknown> | null;
      /**
       * @default 25
       * @enum {intval|null}
       */
      limit?: 10 | 25 | 50 | null;
    };
    OperationSystemListSchemaFilter: {
      /** @description Name of asset */
      static_value?: string | null;
      /**
       * @description Asset affiliation status
       * @default [
       *   0,
       *   1
       * ]
       */
      affiliation?: ((0 | 1 | 3 | 4 | null)[]) | null;
      /**
       * @description Risk levels
       * @default []
       */
      risk_level?: ((0 | 1 | 2 | 3 | 4 | 5 | null)[]) | null;
    };
    PortListSchema: {
      sort?: components["schemas"]["PortListSchemaSort"];
      filter?: components["schemas"]["PortListSchemaFilter"];
      paginate?: components["schemas"]["PortListSchemaSort"];
    };
    PortListSchemaSort: {
      /**
       * @default desc
       * @enum {string|null}
       */
      by_risk?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      risk?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      risk_level?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      static_value?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      by_name?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      affiliation?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      by_affiliation?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      last_discovery_time?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      by_last_discovery_time?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      discovery_time?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      by_discovery_time?: "asc" | "desc" | null;
    };
    PortListSchemaPaginate: {
      /** @default 1 */
      page?: Record<string, unknown> | null;
      /**
       * @default 25
       * @enum {intval|null}
       */
      limit?: 10 | 25 | 50 | null;
    };
    PortListSchemaFilter: {
      /** @description Name of asset */
      static_value?: string | null;
      /**
       * @description Asset affiliation status
       * @default [
       *   0,
       *   1
       * ]
       */
      affiliation?: ((0 | 1 | 3 | 4 | null)[]) | null;
      /**
       * @description Risk levels
       * @default []
       */
      risk_level?: ((0 | 1 | 2 | 3 | 4 | 5 | null)[]) | null;
    };
    IssueCountersSchema: {
      filter?: components["schemas"]["IssueCountersSchemaFilter"];
    };
    IssueCountersSchemaFilter: {
      /**
       * @description Issue status
       * @default [
       *   0,
       *   2
       * ]
       */
      status?: ((0 | 1 | 2 | 3 | 4 | null)[]) | null;
    };
    IssueListSchema: {
      sort?: components["schemas"]["IssueListSchemaSort"];
      filter?: components["schemas"]["IssueListSchemaFilter"];
      paginate?: components["schemas"]["IssueListSchemaPaginate"];
    };
    IssueListSchemaSort: {
      /**
       * @default null
       * @enum {string|null}
       */
      risk?: "asc" | "desc" | null;
      /**
       * @default desc
       * @enum {string|null}
       */
      by_risk?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      risk_level?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      name?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      by_name?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      asset_name?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      by_asset_name?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      status?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      last_discovered_at?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      by_last_discovered_at?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      discovered_at?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      by_discovered_at?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      port?: "asc" | "desc" | null;
      /**
       * @default null
       * @enum {string|null}
       */
      by_port?: "asc" | "desc" | null;
    };
    IssueListSchemaPaginate: {
      /** @default 1 */
      page?: Record<string, unknown> | null;
      /**
       * @default 25
       * @enum {intval|null}
       */
      limit?: 10 | 25 | 50 | null;
    };
    IssueListSchemaFilter: {
      /** @description Name or code of issue */
      name?: string | null;
      /**
       * @description Asset affiliation status
       * @default [
       *   0,
       *   1
       * ]
       */
      affiliation?: ((0 | 1 | 3 | 4 | null)[]) | null;
      /**
       * @description Issue status
       * @default [
       *   0,
       *   2
       * ]
       */
      status?: ((0 | 1 | 2 | 3 | 4 | null)[]) | null;
      /** @description Risk levels */
      risk_level?: ((0 | 1 | 2 | 3 | 4 | 5 | null)[]) | null;
      /** @description Port numbers */
      port?: number[] | null;
      /** @description Name of asset */
      asset_name?: string | null;
    };
    AssetAffiliationFilter: unknown;
    ChangeAffiliation: {
      /** @description Assets to change affiliation */
      assets?: components["schemas"]["AssetAffiliationFilter"][];
    };
    ListAssetsFilter: {
      page?: number;
      per_page?: number;
      type?: string;
      affiliation?: string;
    };
    ChangeVulnerabilityStatuses: {
      /** @description Vulnerabilities to change statuses */
      vulnerabilities: components["schemas"]["VulnerabilityStatus"][];
    };
    ListAssetVulnerabilitiesFilter: {
      statuses?: number[];
      page?: number;
      per_page?: number;
    };
    VulnerabilityStatus: unknown;
    ChangePasswordFilter: {
      /** @description Auth token */
      token: Record<string, unknown> | null;
      password: Record<string, unknown> | null;
    };
    ForgotPasswordFilter: {
      /** Format: email */
      email: string;
    };
    LoginFilter: {
      /** Format: email */
      email: string;
      password: string;
    };
    RegisterFilter: {
      /**
       * Format: email
       * @example customer@site.com
       */
      email: string;
      /** @example John */
      first_name?: string;
      /** @example Doe */
      last_name?: string;
      /** @example Some Company */
      company_name?: string;
      /** @example CEO */
      position?: string;
      /** @example Company infrastructure */
      project_name?: string;
      /** @example Company infrastructure description */
      project_description?: string;
    };
    CustomerChangePasswordFilter: {
      current_password: Record<string, unknown> | null;
      new_password: Record<string, unknown> | null;
    };
    CustomerChangeTimezoneFilter: {
      timezone: Record<string, unknown> | null;
    };
    DashboardCommonFilter: [];
    ExportVulnerabilitiesFilter: {
      format: [];
    };
    MarkNotificationAsReadFilter: {
      /** @description Notifications to mark as read */
      notifications: components["schemas"]["NotificationUuidFilter"][];
    };
    NotificationUuidFilter: {
      /** @description Notification UUID */
      uuid: string;
    };
    CreateProjectFilter: {
      name: string;
      description: string;
    };
    GetProjectAssetCountersFilter: {
      affiliations?: string;
    };
    GetProjectVulnerabilityCountersFilter: {
      affiliations?: string;
      asset_affiliations?: string;
    };
    ListReportFilter: {
      page?: number;
    };
    ConnectFilter: {
      verification_code: string;
      secret: string;
    };
    DisconnectFilter: {
      verification_code?: string;
    };
    VerifyCodeFilter: {
      verification_code?: string;
      signature: string;
    };
    ListVulnerabilitiesFilter: {
      page?: number;
      per_page?: number;
      statuses?: string;
      affiliation?: string;
    };
    /** @description Count of risk levels of one of type issue */
    AssetRiskLevelCount: {
      level?: components["schemas"]["RiskLevel"];
      /** @example 10 */
      count?: number;
    };
    /** @description Asset risk by type and level */
    AssetRisk: {
      risk?: components["schemas"]["Risk"];
      type?: components["schemas"]["RiskType"];
      level?: components["schemas"]["RiskLevel"];
    };
    AssetDiscovering: {
      /**
       * Format: date-time
       * @example 2024-03-02T06:58:23.000000Z
       */
      first_seen?: string;
      /**
       * Format: date-time
       * @example 2024-03-02T06:58:23.000000Z
       */
      last_seen?: string;
      source?: components["schemas"]["AssetSource"];
    };
    AssetProject: {
      uuid?: components["schemas"]["Uuid"];
      /** @example Project - intruforce.com */
      name?: string;
    };
    AssetScanning: {
      /**
       * Format: date-time
       * @example 2024-03-02T06:58:23.000000Z
       */
      last_scan?: string;
    };
    SoftwareService: {
      /**
       * @description Common type of software service
       * @example ssh
       */
      name?: string;
      /**
       * @description Name of product of software like Nginx or OpenSSH, can be null
       * @example OpenSSH
       */
      product?: string | null;
      /**
       * @description Version of product, can be null
       * @example v1.0.0
       */
      version?: string | null;
    };
    AssetDomainInfo: {
      domain?: components["schemas"]["DomainName"];
      /**
       * @description Level of nesting domain name
       * @example 2
       */
      level?: number;
      /**
       * @description Domain zone, 1 level domain name
       * @example com
       */
      zone?: string;
    };
    Domain: {
      uuid?: components["schemas"]["Uuid"];
      name?: components["schemas"]["DomainName"];
      affiliation?: components["schemas"]["AssetAffiliation"];
      type?: components["schemas"]["AssetType"];
      info?: components["schemas"]["AssetDomainInfo"];
      project?: components["schemas"]["AssetProject"];
      discovering?: components["schemas"]["AssetDiscovering"];
      scanning?: components["schemas"]["AssetScanning"];
      risks?: components["schemas"]["AssetRisk"][];
      /** @description Risk levels counts of all open visible issues of asset */
      issue_levels?: components["schemas"]["AssetRiskLevelCount"][];
      /** @example false */
      wildcard_detected?: boolean;
      summary_info?: components["schemas"]["AssetDomainSummaryInfo"];
      whois?: components["schemas"]["WhoisRaw"];
      /** @description Dns records of domain */
      dns?: components["schemas"]["DnsRecord"][];
    };
    RelatedDomains: {
      /** @description Several or all related domain names, depends on List or Get requests */
      domains?: components["schemas"]["DomainName"][];
      /** @description Quantity of all related domains */
      quantity?: number;
    };
    DnsRecord: {
      /**
       * @description Dns type of records like `A`, `AAAA`, `MX` etc
       * @example MX
       */
      type?: string;
      /** @description Value of dns record */
      value?: string;
      /**
       * Format: date-time
       * @description Last seen of dns record
       */
      last_discovery_time?: string;
      /**
       * Format: date-time
       * @description First seen of dns record
       */
      discovery_time?: string;
      /** @description DNS priority */
      priority?: number | null;
    };
    AssetDomainSummaryInfo: {
      related_domains?: components["schemas"]["RelatedDomains"];
      ip_addresses?: components["schemas"]["AssetIpAddressSummaryItem"][];
      /** @description Quantity of related ip addresses */
      ip_addresses_count?: number | null;
      /** @description Group of dns types with counts */
      dns_type_counts?: components["schemas"]["DnsTypCount"][];
    };
    DnsTypCount: {
      /**
       * @description Dns type like A, AAAA, MX
       * @example MX
       */
      type?: string;
      count?: number;
    };
    AssetIpAddressSummaryItem: {
      uuid?: components["schemas"]["Uuid"];
      name?: components["schemas"]["IpName"];
    };
    IpAddress: {
      uuid?: components["schemas"]["Uuid"];
      name?: components["schemas"]["IpName"];
      info?: components["schemas"]["AssetIpInfo"];
      affiliation?: components["schemas"]["AssetAffiliation"];
      type?: components["schemas"]["AssetType"];
      project?: components["schemas"]["AssetProject"];
      discovering?: components["schemas"]["AssetDiscovering"];
      scanning?: components["schemas"]["AssetScanning"];
      risks?: components["schemas"]["AssetRisk"][];
      /** @description Risk levels counts of all open visible issues of asset */
      issue_levels?: components["schemas"]["AssetRiskLevelCount"][];
      summary_info?: components["schemas"]["AssetIpAddressSummaryInfo"];
      whois?: components["schemas"]["WhoisRaw"];
    };
    AssetIpAddressSummaryInfo: {
      related_domains?: components["schemas"]["RelatedDomains"];
      tcp_ports?: components["schemas"]["AssetPortSummaryItem"][];
      operation_systems?: components["schemas"]["AssetOperationSystemSummaryItem"][];
    };
    AssetIpInfo: {
      ip?: components["schemas"]["IpName"];
      /**
       * @description Version of IP Address 4 or 6
       * @example 4
       * @enum {integer}
       */
      ip_version?: 4 | 6;
    };
    AssetOperationSystemInfo: {
      name?: components["schemas"]["OsName"];
      accuracy?: components["schemas"]["Accuracy"];
    };
    AssetOperationSystemSummaryItem: {
      uuid?: components["schemas"]["Uuid"];
      name?: components["schemas"]["OsName"];
      accuracy?: components["schemas"]["Accuracy"];
    };
    /**
     * @description Accuracy of usage
     * @example 77
     */
    Accuracy: Record<string, unknown> | null;
    OperationSystem: {
      uuid?: components["schemas"]["Uuid"];
      name?: components["schemas"]["OsName"];
      info?: components["schemas"]["AssetOperationSystemInfo"];
      ip?: components["schemas"]["AssetIpAddressSummaryItem"];
      service?: components["schemas"]["SoftwareService"];
      affiliation?: components["schemas"]["AssetAffiliation"];
      type?: components["schemas"]["AssetType"];
      discovering?: components["schemas"]["AssetDiscovering"];
      scanning?: components["schemas"]["AssetScanning"];
      risks?: components["schemas"]["AssetRisk"][];
      /** @description Risk levels counts of all open visible issues of asset */
      issue_levels?: components["schemas"]["AssetRiskLevelCount"][];
    };
    AssetPortInfo: {
      number?: components["schemas"]["PortNumber"];
      protocol?: components["schemas"]["AssetTransportProtocol"];
      port_state?: components["schemas"]["AssetPortState"];
    };
    AssetPortSummaryItem: {
      uuid?: components["schemas"]["Uuid"];
      number?: components["schemas"]["PortNumber"];
      risk_level?: components["schemas"]["RiskLevel"];
    };
    Port: {
      uuid?: components["schemas"]["Uuid"];
      /**
       * @description Port asset name (with service)
       * @example 22/ssh
       */
      name?: string;
      info?: components["schemas"]["AssetPortInfo"];
      ip?: components["schemas"]["AssetIpAddressSummaryItem"];
      service?: components["schemas"]["SoftwareService"];
      affiliation?: components["schemas"]["AssetAffiliation"];
      type?: components["schemas"]["AssetType"];
      discovering?: components["schemas"]["AssetDiscovering"];
      scanning?: components["schemas"]["AssetScanning"];
      risks?: components["schemas"]["AssetRisk"][];
      /** @description Risk levels counts of all open visible issues of asset */
      issue_levels?: components["schemas"]["AssetRiskLevelCount"][];
    };
    /**
     * @description Asset affiliation statuses:
     *     * `0` - Unknown
     *     * `1` - Owned
     *     * `3` - Not owned
     *     * `4` - Ignored
     * @enum {int}
     */
    AssetAffiliation: 0 | 1 | 3 | 4;
    /**
     * @description Asset discovering sources statuses:
     *     * `0` - Initial
     *     * `1` - Expert (by manager)
     *     * `2` - Asm (by scanner)
     * @enum {int}
     */
    AssetSource: 0 | 1 | 2;
    /**
     * @description Asset types:
     *     * `0` - Domain
     *     * `1` - IpAddress
     *     * `2` - Port (software)
     *     * `5` - Operation System
     * @enum {int}
     */
    AssetType: 0 | 1 | 2 | 5;
    /**
     * @description Asset port states from nmap:
     *     * `0` - Open
     *     * `1` - Filtered
     *     * `2` - Unfiltered
     *     * `3` - Closed
     *     * `4` - Open Filtered
     *     * `5` - Closed Filtered
     *     * `6` - Unknown
     * @enum {int}
     */
    AssetPortState: 0 | 1 | 3 | 6;
    /**
     * @description Asset types:
     *     * `1` - TCP
     *     * `2` - UDP
     * @enum {int}
     */
    AssetTransportProtocol: 1 | 2;
    WhoisRaw: {
      /** @description Big plain raw whois text */
      raw?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  "2b005afc5ea56154dcaee39c5aaf760c": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DownloadReportFilter"];
      };
    };
    responses: {
      /** @description Result */
      200: {
        headers: {
          /** @description Content type */
          "Content-Type"?: string;
          /** @description Content type */
          "Content-Disposition"?: string;
        };
        content: {
          "application/pdf": string;
          "application/zip": string;
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  "8c26f9ccde28cd0eb6130fd2f44605a6": {
    parameters: {
      path: {
        /**
         * @description Filename
         * @example en.json
         */
        filename: string;
      };
    };
    responses: {
      /** @description Json file with translations */
      200: {
        headers: {
          /** @description Content type */
          "Content-Type"?: string;
        };
        content: {
          "application/json": string;
        };
      };
      /** @description File not found */
      404: never;
    };
  };
  "asset/domain/get": {
    parameters: {
      path: {
        /** @description Domain UUID */
        uuid: string;
      };
    };
    responses: {
      /** @description Retrieve the asset */
      200: {
        content: {
          "application/json": components["schemas"]["Domain"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  "asset/get": {
    parameters: {
      path: {
        /** @description Asset UUID */
        uuid: string;
      };
    };
    responses: {
      /** @description Retrieve the asset */
      200: {
        content: {
          "application/json": components["schemas"]["Asset"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  "asset/ip/get": {
    parameters: {
      path: {
        /** @description IpAddress UUID */
        uuid: components["schemas"]["Uuid"];
      };
    };
    responses: {
      /** @description Retrieve the ip address */
      200: {
        content: {
          "application/json": components["schemas"]["IpAddress"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  "asset/os/get": {
    parameters: {
      path: {
        /** @description OperationSystem UUID */
        uuid: components["schemas"]["Uuid"];
      };
    };
    responses: {
      /** @description Retrieve the operation system */
      200: {
        content: {
          "application/json": components["schemas"]["OperationSystem"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  "asset/port/get": {
    parameters: {
      path: {
        /** @description PortAsset UUID */
        uuid: components["schemas"]["Uuid"];
      };
    };
    responses: {
      /** @description Retrieve the port asset */
      200: {
        content: {
          "application/json": components["schemas"]["Port"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  "asset/vulnerability/details": {
    parameters: {
      path: {
        /** @description Asset UUID */
        assetUuid: string;
        /** @description Vulnerability UUID */
        vulUuid: string;
      };
    };
    responses: {
      /** @description Retrieve the vulnerability details */
      200: {
        content: {
          "application/json": components["schemas"]["Vulnerability"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  "asset/vulnerability/list": {
    parameters: {
      query?: {
        sort?: components["schemas"]["IssueListSchemaSort"];
        filter?: components["schemas"]["IssueListSchemaFilter"];
        paginate?: components["schemas"]["IssueListSchemaPaginate"];
      };
      path: {
        /**
         * @description Asset UUID
         * @example 00000000-0000-0000-0000-000000000000
         */
        uuid: string;
      };
    };
    responses: {
      /** @description Retrieve a list of asset vulnerabilities */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Vulnerability"][];
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  /** @description Change password */
  changePassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangePasswordFilter"];
      };
    };
    responses: {
      /** @description Retrieve a result */
      200: {
        content: {
          "application/json": {
            result?: boolean;
          };
        };
      };
      /** @description Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
    };
  };
  /** @description Reset password */
  forgotPassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ForgotPasswordFilter"];
      };
    };
    responses: {
      /** @description Retrieve a result */
      200: {
        content: {
          "application/json": {
            result?: boolean;
          };
        };
      };
      /** @description Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
    };
  };
  /** @description Log in by credentials */
  login: {
    parameters: {
      header?: {
        /** @example Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 */
        "User-Agent"?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginFilter"];
      };
    };
    responses: {
      /** @description Retrieve a customer */
      200: {
        headers: {
          /** @description Remaining tokens */
          "X-RateLimit-Remaining"?: number;
          /** @description Retry after */
          "X-RateLimit-Retry-After"?: number;
          /** @description Rate Limit */
          "X-RateLimit-Limit"?: number;
          /** @description Captcha client key. If this header is present, captcha is required. */
          "X-Captcha"?: string;
        };
        content: {
          "application/json": components["schemas"]["Auth"];
        };
      };
      /** @description Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
    };
  };
  /** @description Logout a customer */
  logout: {
    parameters: {
      header?: {
        /** @example Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 */
        "User-Agent"?: string;
      };
    };
    responses: {
      /** @description No content */
      204: never;
      /** @description Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
    };
  };
  me: {
    responses: {
      /** @description Retrieve a profile */
      200: {
        content: {
          "application/json": components["schemas"]["Customer"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  /** @description Register a new customer */
  register: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterFilter"];
      };
    };
    responses: {
      /** @description Retrieve a customer */
      200: {
        content: {
          "application/json": components["schemas"]["Auth"];
        };
      };
      /** @description Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
    };
  };
  /** @description Retrieve a list of sessions */
  "sessions.list": {
    responses: {
      /** @description Retrieve a list of sessions */
      200: {
        content: {
          "application/json": {
            sessions?: {
                uuid?: string;
                /** @example 2021-01-01T00:00:00+00:00 */
                last_activity_at?: string;
                /** @example 2021-01-01T00:00:00+00:00 */
                started_at?: string;
                user_agent?: string;
                ip?: string;
                is_active?: boolean;
                /** @example 2021-01-01T00:00:00+00:00 */
                expires_at?: string;
              }[];
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  /** @description Revoke a session by UUID */
  "sessions.revoke": {
    parameters: {
      path: {
        /** @description Session UUID */
        uuid: string;
      };
    };
    responses: {
      /** @description Session revoked successfully */
      200: never;
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  /** @description Revoke all sessions for the current user */
  "sessions.revokeAll": {
    responses: {
      /** @description Sessions revoked successfully */
      200: never;
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  /** @description Change password */
  changePasswordProfile: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomerChangePasswordFilter"];
      };
    };
    responses: {
      /** @description Result */
      200: never;
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
      /** @description Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
    };
  };
  /** @description Change timezone */
  changeTimeZone: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomerChangeTimezoneFilter"];
      };
    };
    responses: {
      /** @description Result */
      200: never;
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
      /** @description Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
    };
  };
  getDashboard: {
    responses: {
      /** @description Retrieve a dashboard */
      200: {
        content: {
          "application/json": {
            /**
             * @deprecated
             * @description Dashboard main
             */
            main?: {
              threat_assessment?: components["schemas"]["ThreatAssessment"];
              vulnerability?: components["schemas"]["Vulnerability"];
              attack_vector?: components["schemas"]["AttackVector"];
              password_leak?: components["schemas"]["PasswordLeak"];
              credential?: components["schemas"]["Credential"];
            };
            /**
             * @deprecated
             * @description Dashboard assets
             */
            assets?: {
              total_asset?: components["schemas"]["TotalAsset"];
              open_port?: components["schemas"]["OpenPort"];
              attack_vector?: components["schemas"]["AssetChange"];
            };
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  "3b44fdc99fa98a60db9f7ff54f5fe7c8": {
    parameters: {
      query?: {
        /** @example 0000-0000-0000-0000-0000 */
        project_uuid?: string;
      };
    };
    responses: {
      /** @description Спислок изменений активов */
      200: {
        content: {
          "application/json": {
            changes?: {
                static_value?: string;
                ports?: {
                    port?: number;
                  }[];
                status?: number;
              }[];
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  ecc48c49a2b657934d9ae02d44dad622: {
    parameters: {
      query?: {
        /** @example 0000-0000-0000-0000-0000 */
        project_uuid?: string;
      };
    };
    responses: {
      /** @description Количество активов */
      200: {
        content: {
          "application/json": {
            total?: number;
            critical_risk?: number;
            high_risk?: number;
            new?: number;
            unavailable?: number;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  "5f173cefa03130c82d7cb590454151d8": {
    parameters: {
      query?: {
        /** @example 0000-0000-0000-0000-0000 */
        project_uuid?: string;
      };
    };
    responses: {
      /** @description Количество атакующих векторов */
      200: {
        content: {
          "application/json": {
            real?: number;
            potential?: number;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  "8fbabf2484f42b43812d52ca18a9a988": {
    parameters: {
      query?: {
        /** @example 0000-0000-0000-0000-0000 */
        project_uuid?: string;
      };
    };
    responses: {
      /** @description Список учетных данных */
      200: {
        content: {
          "application/json": {
            credentials?: {
                service_name?: string;
                total?: number;
                compromised?: number;
              }[];
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  "34847e5e0fb5d3b3cf990d3890ac6b06": {
    parameters: {
      query?: {
        /** @example 0000-0000-0000-0000-0000 */
        project_uuid?: string;
      };
    };
    responses: {
      /** @description Спислок операционных систем */
      200: {
        content: {
          "application/json": {
            os?: {
                os?: string;
                total?: number;
              }[];
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  "4b71b242c7e6f92273eb65e7b71bf8ca": {
    parameters: {
      query?: {
        /** @example 0000-0000-0000-0000-0000 */
        project_uuid?: string;
      };
    };
    responses: {
      /** @description Спислок открытых портов */
      200: {
        content: {
          "application/json": {
            ports?: {
                port?: number;
                protocol?: string;
                total?: number;
              }[];
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  a04f7b986fb9621a5b23776135540585: {
    parameters: {
      query?: {
        /** @example 0000-0000-0000-0000-0000 */
        project_uuid?: string;
      };
    };
    responses: {
      /** @description Общая оценка угроз */
      200: {
        content: {
          "application/json": {
            /** @description Оценка */
            score?: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  "755168a919c3f29bf53ad0a6971d0f0d": {
    parameters: {
      query?: {
        /** @example 0000-0000-0000-0000-0000 */
        project_uuid?: string;
      };
    };
    responses: {
      /** @description Количество уязвимостей */
      200: {
        content: {
          "application/json": {
            /** @description Критический риск */
            critical_risk?: number;
            /** @description Высокий риск */
            high_risk?: number;
            /** @description Средний риск */
            medium_risk?: number;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  /** @description Get downloads list */
  "downloads/list": {
    responses: {
      /** @description Retrieve a list of downloads */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Download"][];
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  /** @description Unread notifications */
  getUnreadNotifications: {
    responses: {
      /** @description Result */
      200: {
        content: {
          "application/json": components["schemas"]["Notifications"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
      /** @description Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
    };
  };
  /** @description Mark notification as read */
  markNotificationsAsRead: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["MarkNotificationAsReadFilter"];
      };
    };
    responses: {
      /** @description Result */
      200: never;
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
      /** @description Validation error */
      422: {
        content: {
          "application/json": components["schemas"]["ValidationError"];
        };
      };
    };
  };
  "project/asset/change-affiliations": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangeAffiliation"];
      };
    };
    responses: {
      /** @description Retrieve the status */
      200: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  /** @description Get project domain list */
  "project/asset/domain/list": {
    parameters: {
      query?: {
        sort?: components["schemas"]["DomainListSchemaSort"];
        filter?: components["schemas"]["DomainListSchemaFilter"];
        paginate?: components["schemas"]["DomainListSchemaPaginate"];
      };
      path: {
        /** @description Project UUID */
        uuid: string;
      };
    };
    responses: {
      /** @description Retrieve a list of domains */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Domain"][];
            meta?: components["schemas"]["PaginationMeta"][];
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  /** @description Export project asset list */
  "project/asset/list/export": {
    parameters: {
      path: {
        /** @description Project UUID */
        uuid: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExportVulnerabilitiesFilter"];
      };
    };
    responses: {
      /** @description Retrieve a download UUID */
      200: {
        content: {
          "application/json": {
            /**
             * @description Download UUID
             * @example 00000000-0000-0000-0000-000000000000
             */
            uuid?: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  /** @description Get project asset counters */
  "project/asset/counters": {
    parameters: {
      query?: {
        filter?: components["schemas"]["AssetCountersSchemaFilter"];
      };
      path: {
        /** @description Project UUID */
        uuid: string;
      };
    };
    responses: {
      /** @description Retrieve the status */
      200: {
        content: {
          "application/json": components["schemas"]["AssetCounters"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  /** @description Get project ip list */
  "project/asset/ip/list": {
    parameters: {
      query?: {
        sort?: components["schemas"]["IpAddressListSchemaSort"];
        filter?: components["schemas"]["IpAddressListSchemaFilter"];
        paginate?: components["schemas"]["IpAddressListSchemaPaginate"];
      };
      path: {
        /** @description Project UUID */
        uuid: string;
      };
    };
    responses: {
      /** @description Retrieve a list of ip addresses */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["IpAddress"][];
            meta?: components["schemas"]["PaginationMeta"][];
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  /** @description Get project asset list */
  "project/asset/list": {
    parameters: {
      query?: {
        sort?: components["schemas"]["AssetListSchemaSort"];
        filter?: components["schemas"]["AssetListSchemaFilter"];
        paginate?: components["schemas"]["AssetListSchemaPaginate"];
      };
      path: {
        /** @description Project UUID */
        uuid: string;
      };
    };
    responses: {
      /** @description Retrieve a list of assets */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Asset"][];
            meta?: components["schemas"]["PaginationMeta"][];
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  /** @description Get project operation system asset list */
  "project/asset/os/list": {
    parameters: {
      query?: {
        sort?: components["schemas"]["OperationSystemListSchemaSort"];
        filter?: components["schemas"]["OperationSystemListSchemaFilter"];
        paginate?: components["schemas"]["OperationSystemListSchemaPaginate"];
      };
      path: {
        /** @description Project UUID */
        uuid: string;
      };
    };
    responses: {
      /** @description Retrieve a list of operation systems */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["OperationSystem"][];
            meta?: components["schemas"]["PaginationMeta"][];
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  /** @description Get project port asset list */
  "project/asset/ports/list": {
    parameters: {
      query?: {
        sort?: components["schemas"]["PortListSchemaSort"];
        filter?: components["schemas"]["PortListSchemaFilter"];
        paginate?: components["schemas"]["PortListSchemaPaginate"];
      };
      path: {
        /** @description Project UUID */
        uuid: string;
      };
    };
    responses: {
      /** @description Retrieve a list of ports */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Port"][];
            meta?: components["schemas"]["PaginationMeta"][];
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  /** @description Create a new project */
  "project/create": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateProjectFilter"];
      };
    };
    responses: {
      /** @description Retrieve a project */
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  /** @description Get project by UUID */
  "project/get": {
    parameters: {
      path: {
        /** @description Project UUID */
        uuid: string;
      };
    };
    responses: {
      /** @description Retrieve a project */
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  /** @description Get projects list */
  "project/list": {
    responses: {
      /** @description Retrieve a list of projects */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Project"][];
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  "project/vulnerability/change-statuses": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangeVulnerabilityStatuses"];
      };
    };
    responses: {
      /** @description Retrieve the result */
      200: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  /** @description Export project vulnerability list */
  "asset/vulnerability/list/export": {
    parameters: {
      path: {
        /**
         * @description Project UUID
         * @example 00000000-0000-0000-0000-000000000000
         */
        uuid: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExportVulnerabilitiesFilter"];
      };
    };
    responses: {
      /** @description Retrieve a download UUID */
      200: {
        content: {
          "application/json": {
            /**
             * @description Download UUID
             * @example 00000000-0000-0000-0000-000000000000
             */
            uuid?: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  getProjectVulnerabilityCounters: {
    parameters: {
      query?: {
        filter?: components["schemas"]["IssueCountersSchema"];
      };
      path: {
        /** @description Project UUID */
        uuid: string;
      };
    };
    responses: {
      /** @description Retrieve the status */
      200: {
        content: {
          "application/json": components["schemas"]["VulnerabilityCounters"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  listProjectVulnerabilities: {
    parameters: {
      query?: {
        sort?: components["schemas"]["IssueListSchemaSort"];
        filter?: components["schemas"]["IssueListSchemaFilter"];
        paginate?: components["schemas"]["IssueListSchemaPaginate"];
      };
      path: {
        /**
         * @description Project UUID
         * @example 00000000-0000-0000-0000-000000000000
         */
        uuid: string;
      };
    };
    responses: {
      /** @description Retrieve a list of vulnerabilities */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Vulnerability"][];
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  listReports: {
    parameters: {
      query?: {
        /** @example 1 */
        page?: string;
      };
    };
    responses: {
      /** @description Retrieve a list of reports */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Report"][];
            meta?: components["schemas"]["PaginationMeta"][];
          };
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  twoStepConnect: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConnectFilter"];
      };
    };
    responses: {
      /** @description Returns 2fa backup codes */
      200: {
        content: {
          "application/json": components["schemas"]["BackupCodes"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  twoStepDisconnect: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DisconnectFilter"];
      };
    };
    responses: {
      /** @description Returns QR code */
      200: {
        content: {
          "application/json": components["schemas"]["QRCode"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  twoStepShowQrCode: {
    responses: {
      /** @description Returns QR Code */
      200: {
        content: {
          "application/json": components["schemas"]["QRCode"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  twoStepShowVerifyCode: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["VerifyCodeFilter"];
      };
    };
    responses: {
      /** @description Returns auth token */
      200: {
        content: {
          "application/json": components["schemas"]["Token"];
        };
      };
    };
  };
  getVulnerabilityByUuid: {
    parameters: {
      path: {
        /** @description Vulnerability UUID */
        uuid: string;
      };
    };
    responses: {
      /** @description Retrieve the asset */
      200: {
        content: {
          "application/json": components["schemas"]["Vulnerability"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["UnauthorizedError"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
}
